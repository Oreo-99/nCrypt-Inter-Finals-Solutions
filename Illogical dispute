#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
#define int long long
using vi = vector<int>;
using vs = vector<string>;
using vb = vector<bool>;
using vvi = vector<vector<int>>;
using pii = pair<int, int>;
using vpii = vector<pair<int, int>>;
using si = set<int>;
using mii = map<int, int>;
template<typename T> using pbds = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define sz(x) (int)size(x)
#define pb emplace_back
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define fr first
#define sc second
#define f(i, end) for (int i = 0; i < end; i++)
#define ff(i, start, end) for (int i = start; i < end; i++)
template<typename T, typename U> inline void domin(T &x, U y) {if (y < x) x = y;}
template<typename T, typename U> inline void domax(T &x, U y) {if (y > x) x = y;}
template<typename T, typename U> ostream& operator<<(ostream &os, const pair<T, U> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template < typename T_container, typename T = typename enable_if < !is_same<T_container, string>::value, typename T_container::value_type >::type > ostream & operator<<(ostream &os, const T_container &a) { os << '{'; string sep; for (const T &x : a) os << sep << x, sep = ", "; return os << '}';}
void debug() {cerr << endl;}
template <typename Head, typename... Tail> void debug(Head h, Tail... t) {cerr << h << ' '; debug(t...);}
#ifdef singlabharat
#define debug(...) cerr << "(" << #__VA_ARGS__ << ") : ", debug(__VA_ARGS__)
#else
#define debug(...)
#endif
#define endl '\n'
const vector<pair<int, int>> dirs = {{ -1, 0}, {0, 1}, {1, 0}, {0, -1}};
const int MX = 2e5 + 2, MOD = 1e9 + 7, MOD2 = 998244353, INF = 1e18;

struct SegmentTree {
    int n;
    vector<int> segtree;

    int merge(int x, int y) {
        return x + y;
    }

    SegmentTree(const vector<int> &a) : n(size(a)), segtree(n * 4) {
        build(a, 0, 0, n - 1);
    }

    void build(const vector<int> &a, int node, int start, int end) {
        if (start == end) {
            segtree[node] = a[start];
            return;
        }
        int mid = (start + end) / 2;
        int left_child = node * 2 + 1, right_child = node * 2 + 2;
        build(a, left_child, start, mid);
        build(a, right_child, mid + 1, end);
    }

    // val OR arr[left...right]
    void update(int left, int right, int val) {
        update(0, 0, n - 1, left, right, val);
    }

    void update(int node, int start, int end, int left, int right, int val) {
        if (right < start or end < left) return;
        if (left <= start and end <= right) {
            segtree[node] |= val;
            return;
        }
        int mid = (start + end) / 2;
        int left_child = node * 2 + 1, right_child = node * 2 + 2;
        update(left_child, start, mid, left, right, val);
        update(right_child, mid + 1, end, left, right, val);
    }

    // return arr[ind]
    int query(int ind) {
        return query(0, 0, n - 1, ind);
    }

    int query(int node, int start, int end, int ind) {
        if (start == end) return segtree[node];
        int mid = (start + end) / 2;
        int left_child = node * 2 + 1, right_child = node * 2 + 2;
        if (ind <= mid) return segtree[node] | query(left_child, start, mid, ind);
        else return segtree[node] | query(right_child, mid + 1, end, ind);
    }
};

void solve() {

    int n;
    cin >> n;
    vi a(n);
    f(i, n) cin >> a[i];
    SegmentTree st(a);
    int q;
    cin >> q;
    while (q--) {
        int l, r, x;
        cin >> l >> r >> x;
        l--, r--;
        st.update(l, r, x);
    }

    f(i, n) cout << st.query(i) << ' ';
}

int32_t main() {

#ifdef singlabharat
    freopen("error.txt", "w", stderr);
#endif

    cin.tie(0)->sync_with_stdio(0);

    int t = 1;
    // cin >> t;

    for (int tc = 0; tc < t; tc++) solve();
}
