#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
#define int long long
using vi = vector<int>;
using vs = vector<string>;
using vb = vector<bool>;
using vvi = vector<vector<int>>;
using pii = pair<int, int>;
using vpii = vector<pair<int, int>>;
using si = set<int>;
using mii = map<int, int>;
template<typename T> using pbds = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define sz(x) (int)size(x)
#define pb emplace_back
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define fr first
#define sc second
#define f(i, end) for (int i = 0; i < end; i++)
#define ff(i, start, end) for (int i = start; i < end; i++)
template<typename T, typename U> inline void domin(T &x, U y) {if (y < x) x = y;}
template<typename T, typename U> inline void domax(T &x, U y) {if (y > x) x = y;}
template<typename T, typename U> ostream& operator<<(ostream &os, const pair<T, U> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template < typename T_container, typename T = typename enable_if < !is_same<T_container, string>::value, typename T_container::value_type >::type > ostream & operator<<(ostream &os, const T_container &a) { os << '{'; string sep; for (const T &x : a) os << sep << x, sep = ", "; return os << '}';}
void debug() {cerr << endl;}
template <typename Head, typename... Tail> void debug(Head h, Tail... t) {cerr << h << ' '; debug(t...);}
#ifdef singlabharat
#define debug(...) cerr << "(" << #__VA_ARGS__ << ") : ", debug(__VA_ARGS__)
#else
#define debug(...)
#endif
#define endl '\n'
const vector<pair<int, int>> dirs = {{ -1, 0}, {0, 1}, {1, 0}, {0, -1}};
const int MX = 2e5 + 2, MOD = 1e9 + 7, MOD2 = 998244353, INF = 1e18;

struct DSU {
    vector<int> par, size;
    int comps;

    DSU(int n) : par(n), size(n, 1), comps(n) {
        iota(begin(par), end(par), 0);
    }

    void unite(int u, int v) {
        u = find(u), v = find(v);
        if (u == v) return;
        if (size[u] < size[v]) swap(u, v);
        par[v] = u;
        size[u] += size[v];
        comps--;
    }

    int find(int u) {
        return (par[u] == u ? u : par[u] = find(par[u]));
    }

    bool same(int u, int v) {
        return find(u) == find(v);
    }
};

void solve() {

    int n;
    cin >> n;
    int a1, b1, a2, b2;
    cin >> a1 >> b1 >> a2 >> b2;
    a1--, b1--, a2--, b2--;
    vs a(n);
    f(i, n) cin >> a[i];

    auto valid = [&](int i, int j) -> bool {
        return 0 <= i and i < n and 0 <= j and j < n and a[i][j] == '0';
    };

    DSU dsu(n * n);
    f(i, n) {
        f(j, n) {
            if (valid(i, j)) {
                for (auto [di, dj] : dirs) {
                    int ni = i + di, nj = j + dj;
                    if (valid(ni, nj)) {
                        dsu.unite(i * n + j, ni * n + nj);
                    }
                }
            }
        }
    }

    int ans = INF;
    f(i1, n) {
        f(j1, n) {
            f(i2, n) {
                f(j2, n) {
                    if (dsu.same(i1 * n + j1, a1 * n + b1) and dsu.same(i2 * n + j2, a2 * n + b2)) {
                        domin(ans, (i1 - i2) * (i1 - i2) + (j1 - j2) * (j1 - j2));
                    }
                }
            }
        }
    }
    cout << ans;
}

int32_t main() {

#ifdef singlabharat
    freopen("error.txt", "w", stderr);
#endif

    cin.tie(0)->sync_with_stdio(0);

    int t = 1;
    // cin >> t;

    for (int tc = 0; tc < t; tc++) solve();
}
